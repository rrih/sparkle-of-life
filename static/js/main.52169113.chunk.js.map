{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Title","styled","div","All","Button","button","Eye","posY","Math","floor","random","posX","Pupil","Cell","y","x","Screen","randBools","twentyList","i","resultOfRandomGen","includes","push","randTwenty","resultBools","forEach","App","useState","isLifes","setIsLifes","className","map","res","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"64CAGA,IAAMA,EAAQC,IAAOC,IAAV,KAILC,EAAMF,IAAOC,IAAV,KAIHE,EAASH,IAAOI,OAAV,KAQNC,EAAML,IAAOC,IAAV,KAMA,WACL,IAAMK,EAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7B,MAAM,GAAN,OAAUH,EAAV,QAEM,WACN,IAAMI,EAAOH,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7B,MAAM,GAAN,OAAUC,EAAV,QAIEC,EAAQX,IAAOC,IAAV,KAMF,WACL,IAAMK,EAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7B,MAAM,GAAN,OAAUH,EAAV,QAEM,WACN,IAAMI,EAAOH,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7B,MAAM,GAAN,OAAUC,EAAV,QAKEE,EAAOZ,IAAOC,IAAV,KAEE,WACR,IAAIY,EAAoB,IAAhBN,KAAKE,SACb,MAAM,GAAN,OAAUI,EAAV,SAEO,WACP,IAAIC,EAAoB,IAAhBP,KAAKE,SACb,MAAM,GAAN,OAAUK,EAAV,SAIK,WAIL,IAAID,EAAoB,IAAhBN,KAAKE,SACb,MAAM,GAAN,OAAUI,EAAV,QAEM,WAGN,IAAIC,EAAoB,IAAhBP,KAAKE,SACb,MAAM,GAAN,OAAUK,EAAV,QAKEC,EAASf,IAAOC,IAAV,KAoCL,SAASe,IACd,IAAMC,EAhBD,WAEL,IADA,IAAIA,EAAuB,GAClBC,EAAI,EAAGA,EAAI,IAAK,CACvB,IAAMC,EAAoB,EAAIZ,KAAKC,MAAsB,GAAhBD,KAAKE,UACzCQ,EAAWG,SAASD,KACvBF,EAAWI,KAAKF,GAChBD,KAMJ,OAAOD,EAIsBK,GACvBC,EAAyB,GAI/B,OAHAN,EAAWO,SAAQ,SAACN,GAClBK,EAAYF,KAAKH,EAAI,MAEhBK,EAcF,IAkBQE,EAlBI,WAAO,IAAD,EACOC,mBAAoBV,KAD3B,mBAChBW,EADgB,KACPC,EADO,KAEvB,OACE,kBAAC1B,EAAD,KACE,kBAACH,EAAD,wBACA,kBAACgB,EAAD,CAAQc,UAAU,WACJ,MAAXF,GAAmBA,EAAQG,KAAI,SAACC,EAAKb,GACpC,OAAoBa,EAVb,kBAACnB,EAAD,KAAM,kBAACP,EAAD,KAAK,kBAACM,EAAD,QAA+B,kBAACC,EAAD,UAarD,kBAACT,EAAD,CAAQ6B,KAAK,SAASH,UAAU,uCAAuCI,QAAS,kBAAML,EAAWZ,OAAjG,mBCtIckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.52169113.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from \"styled-components\";\n\nconst Title = styled.div`\n  color: black;\n  font-size: 300%;\n`\nconst All = styled.div`\n  text-align: center;\n`\n\nconst Button = styled.button`\n  font-size: 20px;\n  margin: 10px;\n  padding: 10px 17px;\n  bottom: 10px;\n`\n\n// 目玉が5個\nconst Eye = styled.div`\n  background-color: #ffffff;\n  height: 50%;\n  width: 50%;\n  position: relative;\n  border-radius: 50% 50% 50% 50%;\n  top: ${() => {\n    const posY = Math.floor(Math.random() * 50);\n    return `${posY}%`;\n  }};\n  left: ${() => {\n    const posX = Math.floor(Math.random() * 50);\n    return `${posX}%`;\n  }}\n`\n\nconst Pupil = styled.div`\n  background-color: #0180ff;\n  height: 10px;\n  width: 10px;\n  border-radius: 80% 80% 80% 80%;\n  position: relative;\n  top: ${() => {\n    const posY = Math.floor(Math.random() * 50);\n    return `${posY}%`;\n  }};\n  left: ${() => {\n    const posX = Math.floor(Math.random() * 50);\n    return `${posX}%`;\n  }}\n`\n\n// 細胞が12個\nconst Cell = styled.div`\n  background-color: #ff0000;\n  height: ${() => {\n    let y = Math.random() * 100;\n    return `${y}px`;\n  }};\n  width: ${() => {\n    let x = Math.random() * 100;\n    return `${x}px`;\n  }};\n  border-radius: 80% 80% 80% 80%;\n  position: relative;\n  top: ${() => {\n    // const posY = positions[countY][0];\n    // countY++;\n    \n    let y = Math.random() * 100;\n    return `${y}%`;\n  }};\n  left: ${() => {\n    // const posX = positions[countX][1];\n    // countX++;\n    let x = Math.random() * 100;\n    return `${x}%`;\n  }}\n`\n\n\nconst Screen = styled.div`\n  height: 400px;\n  width: 400px;\n  text-align: center;\n  display: flex;\n  position: relative;\n  top: -50%;\n  left: -25%;\n`\n\n// 引数：座標、大きさを渡す\n// function generatedLife() {\n//   const isEyeAnsers = randBools();\n//   return isEyeAnsers.map((res, i) => {\n//     return res ? <Cell><Eye><Pupil></Pupil></Eye></Cell> : <Cell></Cell>\n//   })\n// };\n\n// const defaultPositions = positions;\n\n// ランダム\nexport function randTwenty() {\n  let twentyList: number[] = [];\n  for (let i = 0; i < 12;) {\n    const resultOfRandomGen = 1 + Math.floor(Math.random() * 12);\n    if (!twentyList.includes(resultOfRandomGen)) {\n      twentyList.push(resultOfRandomGen);\n      i++;\n    }\n    else {\n      continue;\n    }\n  }\n  return twentyList;\n}\n\nexport function randBools() {\n  const twentyList: number[] = randTwenty();\n  const resultBools: boolean[] = [];\n  twentyList.forEach((i: number) => {\n    resultBools.push(i < 6);\n  })\n  return resultBools;\n}\n\n// async function screenShotAndTweet() {\n//   const browser = await puppeteer.launch();\n//   const page = await browser.newPage();\n//   await page.screenshot({ path: 'lifes.png' });\n//   // await browser.close();\n// }\n\nfunction generateCell(isEye) {\n  return isEye ? <Cell><Eye><Pupil></Pupil></Eye></Cell> : <Cell></Cell>\n}\n\nexport const App = () => {\n  const [isLifes, setIsLifes] = useState<boolean[]>(randBools());\n  return (\n    <All>\n      <Title>sparkle of life</Title>\n      <Screen className=\"mx-auto\">\n        {isLifes != null && isLifes.map((res, i) => {\n          return generateCell(res);\n        })}\n      </Screen>\n      <Button type=\"button\" className=\"btn btn-outline-primary rounded-pill\" onClick={() => setIsLifes(randBools())}>Generate life</Button>\n      {/* <div>\n        <Button type=\"button\" className=\"btn btn-primary rounded-pill\"><i className=\"fab fa-twitter\"></i> Tweet sparkle of life</Button>\n      </div> */}\n    </All>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}